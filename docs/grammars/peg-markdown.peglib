#From: https://github.com/jgm/peg-markdown/blob/0e0e9e5d7b5e133bd28849e1d72e9636a3b49109/markdown_parser.leg
#/**********************************************************************
#
#  markdown_parser.leg - markdown parser in C using a PEG grammar.
#  (c) 2008 John MacFarlane (jgm at berkeley dot edu).
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License or the MIT
#  license.  See LICENSE for details.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# ***********************************************************************/

#/**********************************************************************
#
#  PEG grammar and parser actions for markdown syntax.
#
# ***********************************************************************/


Doc <-       BOM? StartList ( Block )*

Block <-     BlankLine*
            ( BlockQuote
            / Verbatim
            / Note
            / Reference
            / HorizontalRule
            / Heading
            / OrderedList
            / BulletList
            / HtmlBlock
            / StyleBlock
            / Para
            / Plain )

Para <-      NonindentSpace Inlines BlankLine+

Plain <-     Inlines

AtxInline <- !Newline !(Sp '#'* Sp Newline) Inline

AtxStart <-  < ( "######" / "#####" / "####" / "###" / "##" / "#" ) >

AtxHeading <- s:AtxStart Sp StartList ( AtxInline )+ (Sp '#'* Sp)?  Newline

SetextHeading <- SetextHeading1 / SetextHeading2

SetextBottom1 <- '='+ Newline

SetextBottom2 <- '-'+ Newline

SetextHeading1 <-  &(RawLine SetextBottom1)
                  StartList ( !Endline Inline )+ Sp Newline
                  SetextBottom1

SetextHeading2 <-  &(RawLine SetextBottom2)
                  StartList ( !Endline Inline )+ Sp Newline
                  SetextBottom2

Heading <- SetextHeading / AtxHeading

BlockQuote <- BlockQuoteRaw

BlockQuoteRaw <-  StartList
                 (( '>' ' '? Line )
                  ( !'>' !BlankLine Line )*
                  ( BlankLine)*
                 )+

NonblankIndentedLine <- !BlankLine IndentedLine

VerbatimChunk <- StartList
                ( BlankLine )*
                ( NonblankIndentedLine )+

Verbatim <-     StartList ( VerbatimChunk )+

HorizontalRule <- NonindentSpace
                 ( '*' Sp '*' Sp '*' (Sp '*')*
                 / '-' Sp '-' Sp '-' (Sp '-')*
                 / '_' Sp '_' Sp '_' (Sp '_')*)
                 Sp Newline BlankLine+

Bullet <- !HorizontalRule NonindentSpace ('+' / '*' / '-') Spacechar+

BulletList <- &Bullet (ListTight / ListLoose)

ListTight <- StartList
            ( ListItemTight { a <- cons($$, a); } )+
            BlankLine* !(Bullet / Enumerator)

ListLoose <- StartList
            ( ListItem BlankLine* )+

ListItem <-  ( Bullet / Enumerator )
            StartList
            ListBlock
            ( ListContinuationBlock )*

ListItemTight =
            ( Bullet / Enumerator )
            StartList
            ListBlock
            ( !BlankLine
              ListContinuationBlock )*
            !ListContinuationBlock

ListBlock <- StartList
            !BlankLine Line
            ( ListBlockLine)*

ListContinuationBlock <- StartList
                        ( < BlankLine* >)
                        ( Indent ListBlock )+

Enumerator <- NonindentSpace [0-9]+ '.' Spacechar+

OrderedList <- &Enumerator (ListTight / ListLoose)

ListBlockLine <- !BlankLine
                !( Indent? (Bullet / Enumerator) )
                !HorizontalRule
                OptionallyIndentedLine

# Parsers for different kinds of block-level HTML content.
# This is repetitive due to constraints of PEG grammar.

HtmlBlockOpenAddress <- '<' Spnl ("address" / "ADDRESS") Spnl HtmlAttribute* '>'
HtmlBlockCloseAddress <- '<' Spnl '/' ("address" / "ADDRESS") Spnl '>'
HtmlBlockAddress <- HtmlBlockOpenAddress (HtmlBlockAddress / !HtmlBlockCloseAddress .)* HtmlBlockCloseAddress

HtmlBlockOpenBlockquote <- '<' Spnl ("blockquote" / "BLOCKQUOTE") Spnl HtmlAttribute* '>'
HtmlBlockCloseBlockquote <- '<' Spnl '/' ("blockquote" / "BLOCKQUOTE") Spnl '>'
HtmlBlockBlockquote <- HtmlBlockOpenBlockquote (HtmlBlockBlockquote / !HtmlBlockCloseBlockquote .)* HtmlBlockCloseBlockquote

HtmlBlockOpenCenter <- '<' Spnl ("center" / "CENTER") Spnl HtmlAttribute* '>'
HtmlBlockCloseCenter <- '<' Spnl '/' ("center" / "CENTER") Spnl '>'
HtmlBlockCenter <- HtmlBlockOpenCenter (HtmlBlockCenter / !HtmlBlockCloseCenter .)* HtmlBlockCloseCenter

HtmlBlockOpenDir <- '<' Spnl ("dir" / "DIR") Spnl HtmlAttribute* '>'
HtmlBlockCloseDir <- '<' Spnl '/' ("dir" / "DIR") Spnl '>'
HtmlBlockDir <- HtmlBlockOpenDir (HtmlBlockDir / !HtmlBlockCloseDir .)* HtmlBlockCloseDir

HtmlBlockOpenDiv <- '<' Spnl ("div" / "DIV") Spnl HtmlAttribute* '>'
HtmlBlockCloseDiv <- '<' Spnl '/' ("div" / "DIV") Spnl '>'
HtmlBlockDiv <- HtmlBlockOpenDiv (HtmlBlockDiv / !HtmlBlockCloseDiv .)* HtmlBlockCloseDiv

HtmlBlockOpenDl <- '<' Spnl ("dl" / "DL") Spnl HtmlAttribute* '>'
HtmlBlockCloseDl <- '<' Spnl '/' ("dl" / "DL") Spnl '>'
HtmlBlockDl <- HtmlBlockOpenDl (HtmlBlockDl / !HtmlBlockCloseDl .)* HtmlBlockCloseDl

HtmlBlockOpenFieldset <- '<' Spnl ("fieldset" / "FIELDSET") Spnl HtmlAttribute* '>'
HtmlBlockCloseFieldset <- '<' Spnl '/' ("fieldset" / "FIELDSET") Spnl '>'
HtmlBlockFieldset <- HtmlBlockOpenFieldset (HtmlBlockFieldset / !HtmlBlockCloseFieldset .)* HtmlBlockCloseFieldset

HtmlBlockOpenForm <- '<' Spnl ("form" / "FORM") Spnl HtmlAttribute* '>'
HtmlBlockCloseForm <- '<' Spnl '/' ("form" / "FORM") Spnl '>'
HtmlBlockForm <- HtmlBlockOpenForm (HtmlBlockForm / !HtmlBlockCloseForm .)* HtmlBlockCloseForm

HtmlBlockOpenH1 <- '<' Spnl ("h1" / "H1") Spnl HtmlAttribute* '>'
HtmlBlockCloseH1 <- '<' Spnl '/' ("h1" / "H1") Spnl '>'
HtmlBlockH1 <- HtmlBlockOpenH1 (HtmlBlockH1 / !HtmlBlockCloseH1 .)* HtmlBlockCloseH1

HtmlBlockOpenH2 <- '<' Spnl ("h2" / "H2") Spnl HtmlAttribute* '>'
HtmlBlockCloseH2 <- '<' Spnl '/' ("h2" / "H2") Spnl '>'
HtmlBlockH2 <- HtmlBlockOpenH2 (HtmlBlockH2 / !HtmlBlockCloseH2 .)* HtmlBlockCloseH2

HtmlBlockOpenH3 <- '<' Spnl ("h3" / "H3") Spnl HtmlAttribute* '>'
HtmlBlockCloseH3 <- '<' Spnl '/' ("h3" / "H3") Spnl '>'
HtmlBlockH3 <- HtmlBlockOpenH3 (HtmlBlockH3 / !HtmlBlockCloseH3 .)* HtmlBlockCloseH3

HtmlBlockOpenH4 <- '<' Spnl ("h4" / "H4") Spnl HtmlAttribute* '>'
HtmlBlockCloseH4 <- '<' Spnl '/' ("h4" / "H4") Spnl '>'
HtmlBlockH4 <- HtmlBlockOpenH4 (HtmlBlockH4 / !HtmlBlockCloseH4 .)* HtmlBlockCloseH4

HtmlBlockOpenH5 <- '<' Spnl ("h5" / "H5") Spnl HtmlAttribute* '>'
HtmlBlockCloseH5 <- '<' Spnl '/' ("h5" / "H5") Spnl '>'
HtmlBlockH5 <- HtmlBlockOpenH5 (HtmlBlockH5 / !HtmlBlockCloseH5 .)* HtmlBlockCloseH5

HtmlBlockOpenH6 <- '<' Spnl ("h6" / "H6") Spnl HtmlAttribute* '>'
HtmlBlockCloseH6 <- '<' Spnl '/' ("h6" / "H6") Spnl '>'
HtmlBlockH6 <- HtmlBlockOpenH6 (HtmlBlockH6 / !HtmlBlockCloseH6 .)* HtmlBlockCloseH6

HtmlBlockOpenMenu <- '<' Spnl ("menu" / "MENU") Spnl HtmlAttribute* '>'
HtmlBlockCloseMenu <- '<' Spnl '/' ("menu" / "MENU") Spnl '>'
HtmlBlockMenu <- HtmlBlockOpenMenu (HtmlBlockMenu / !HtmlBlockCloseMenu .)* HtmlBlockCloseMenu

HtmlBlockOpenNoframes <- '<' Spnl ("noframes" / "NOFRAMES") Spnl HtmlAttribute* '>'
HtmlBlockCloseNoframes <- '<' Spnl '/' ("noframes" / "NOFRAMES") Spnl '>'
HtmlBlockNoframes <- HtmlBlockOpenNoframes (HtmlBlockNoframes / !HtmlBlockCloseNoframes .)* HtmlBlockCloseNoframes

HtmlBlockOpenNoscript <- '<' Spnl ("noscript" / "NOSCRIPT") Spnl HtmlAttribute* '>'
HtmlBlockCloseNoscript <- '<' Spnl '/' ("noscript" / "NOSCRIPT") Spnl '>'
HtmlBlockNoscript <- HtmlBlockOpenNoscript (HtmlBlockNoscript / !HtmlBlockCloseNoscript .)* HtmlBlockCloseNoscript

HtmlBlockOpenOl <- '<' Spnl ("ol" / "OL") Spnl HtmlAttribute* '>'
HtmlBlockCloseOl <- '<' Spnl '/' ("ol" / "OL") Spnl '>'
HtmlBlockOl <- HtmlBlockOpenOl (HtmlBlockOl / !HtmlBlockCloseOl .)* HtmlBlockCloseOl

HtmlBlockOpenP <- '<' Spnl ("p" / "P") Spnl HtmlAttribute* '>'
HtmlBlockCloseP <- '<' Spnl '/' ("p" / "P") Spnl '>'
HtmlBlockP <- HtmlBlockOpenP (HtmlBlockP / !HtmlBlockCloseP .)* HtmlBlockCloseP

HtmlBlockOpenPre <- '<' Spnl ("pre" / "PRE") Spnl HtmlAttribute* '>'
HtmlBlockClosePre <- '<' Spnl '/' ("pre" / "PRE") Spnl '>'
HtmlBlockPre <- HtmlBlockOpenPre (HtmlBlockPre / !HtmlBlockClosePre .)* HtmlBlockClosePre

HtmlBlockOpenTable <- '<' Spnl ("table" / "TABLE") Spnl HtmlAttribute* '>'
HtmlBlockCloseTable <- '<' Spnl '/' ("table" / "TABLE") Spnl '>'
HtmlBlockTable <- HtmlBlockOpenTable (HtmlBlockTable / !HtmlBlockCloseTable .)* HtmlBlockCloseTable

HtmlBlockOpenUl <- '<' Spnl ("ul" / "UL") Spnl HtmlAttribute* '>'
HtmlBlockCloseUl <- '<' Spnl '/' ("ul" / "UL") Spnl '>'
HtmlBlockUl <- HtmlBlockOpenUl (HtmlBlockUl / !HtmlBlockCloseUl .)* HtmlBlockCloseUl

HtmlBlockOpenDd <- '<' Spnl ("dd" / "DD") Spnl HtmlAttribute* '>'
HtmlBlockCloseDd <- '<' Spnl '/' ("dd" / "DD") Spnl '>'
HtmlBlockDd <- HtmlBlockOpenDd (HtmlBlockDd / !HtmlBlockCloseDd .)* HtmlBlockCloseDd

HtmlBlockOpenDt <- '<' Spnl ("dt" / "DT") Spnl HtmlAttribute* '>'
HtmlBlockCloseDt <- '<' Spnl '/' ("dt" / "DT") Spnl '>'
HtmlBlockDt <- HtmlBlockOpenDt (HtmlBlockDt / !HtmlBlockCloseDt .)* HtmlBlockCloseDt

HtmlBlockOpenFrameset <- '<' Spnl ("frameset" / "FRAMESET") Spnl HtmlAttribute* '>'
HtmlBlockCloseFrameset <- '<' Spnl '/' ("frameset" / "FRAMESET") Spnl '>'
HtmlBlockFrameset <- HtmlBlockOpenFrameset (HtmlBlockFrameset / !HtmlBlockCloseFrameset .)* HtmlBlockCloseFrameset

HtmlBlockOpenLi <- '<' Spnl ("li" / "LI") Spnl HtmlAttribute* '>'
HtmlBlockCloseLi <- '<' Spnl '/' ("li" / "LI") Spnl '>'
HtmlBlockLi <- HtmlBlockOpenLi (HtmlBlockLi / !HtmlBlockCloseLi .)* HtmlBlockCloseLi

HtmlBlockOpenTbody <- '<' Spnl ("tbody" / "TBODY") Spnl HtmlAttribute* '>'
HtmlBlockCloseTbody <- '<' Spnl '/' ("tbody" / "TBODY") Spnl '>'
HtmlBlockTbody <- HtmlBlockOpenTbody (HtmlBlockTbody / !HtmlBlockCloseTbody .)* HtmlBlockCloseTbody

HtmlBlockOpenTd <- '<' Spnl ("td" / "TD") Spnl HtmlAttribute* '>'
HtmlBlockCloseTd <- '<' Spnl '/' ("td" / "TD") Spnl '>'
HtmlBlockTd <- HtmlBlockOpenTd (HtmlBlockTd / !HtmlBlockCloseTd .)* HtmlBlockCloseTd

HtmlBlockOpenTfoot <- '<' Spnl ("tfoot" / "TFOOT") Spnl HtmlAttribute* '>'
HtmlBlockCloseTfoot <- '<' Spnl '/' ("tfoot" / "TFOOT") Spnl '>'
HtmlBlockTfoot <- HtmlBlockOpenTfoot (HtmlBlockTfoot / !HtmlBlockCloseTfoot .)* HtmlBlockCloseTfoot

HtmlBlockOpenTh <- '<' Spnl ("th" / "TH") Spnl HtmlAttribute* '>'
HtmlBlockCloseTh <- '<' Spnl '/' ("th" / "TH") Spnl '>'
HtmlBlockTh <- HtmlBlockOpenTh (HtmlBlockTh / !HtmlBlockCloseTh .)* HtmlBlockCloseTh

HtmlBlockOpenThead <- '<' Spnl ("thead" / "THEAD") Spnl HtmlAttribute* '>'
HtmlBlockCloseThead <- '<' Spnl '/' ("thead" / "THEAD") Spnl '>'
HtmlBlockThead <- HtmlBlockOpenThead (HtmlBlockThead / !HtmlBlockCloseThead .)* HtmlBlockCloseThead

HtmlBlockOpenTr <- '<' Spnl ("tr" / "TR") Spnl HtmlAttribute* '>'
HtmlBlockCloseTr <- '<' Spnl '/' ("tr" / "TR") Spnl '>'
HtmlBlockTr <- HtmlBlockOpenTr (HtmlBlockTr / !HtmlBlockCloseTr .)* HtmlBlockCloseTr

HtmlBlockOpenScript <- '<' Spnl ("script" / "SCRIPT") Spnl HtmlAttribute* '>'
HtmlBlockCloseScript <- '<' Spnl '/' ("script" / "SCRIPT") Spnl '>'
HtmlBlockScript <- HtmlBlockOpenScript (!HtmlBlockCloseScript .)* HtmlBlockCloseScript

HtmlBlockOpenHead <- '<' Spnl ("head" / "HEAD") Spnl HtmlAttribute* '>'
HtmlBlockCloseHead <- '<' Spnl '/' ("head" / "HEAD") Spnl '>'
HtmlBlockHead <- HtmlBlockOpenHead (!HtmlBlockCloseHead .)* HtmlBlockCloseHead

HtmlBlockInTags <- HtmlBlockAddress
                / HtmlBlockBlockquote
                / HtmlBlockCenter
                / HtmlBlockDir
                / HtmlBlockDiv
                / HtmlBlockDl
                / HtmlBlockFieldset
                / HtmlBlockForm
                / HtmlBlockH1
                / HtmlBlockH2
                / HtmlBlockH3
                / HtmlBlockH4
                / HtmlBlockH5
                / HtmlBlockH6
                / HtmlBlockMenu
                / HtmlBlockNoframes
                / HtmlBlockNoscript
                / HtmlBlockOl
                / HtmlBlockP
                / HtmlBlockPre
                / HtmlBlockTable
                / HtmlBlockUl
                / HtmlBlockDd
                / HtmlBlockDt
                / HtmlBlockFrameset
                / HtmlBlockLi
                / HtmlBlockTbody
                / HtmlBlockTd
                / HtmlBlockTfoot
                / HtmlBlockTh
                / HtmlBlockThead
                / HtmlBlockTr
                / HtmlBlockScript
                / HtmlBlockHead

HtmlBlock <- < ( HtmlBlockInTags / HtmlComment / HtmlBlockSelfClosing ) >
            BlankLine+

HtmlBlockSelfClosing <- '<' Spnl HtmlBlockType Spnl HtmlAttribute* '/' Spnl '>'

HtmlBlockType <- "address" / "blockquote" / "center" / "dir" / "div" / "dl" / "fieldset" / "form" / "h1" / "h2" / "h3" /
                "h4" / "h5" / "h6" / "hr" / "isindex" / "menu" / "noframes" / "noscript" / "ol" / "p" / "pre" / "table" /
                "ul" / "dd" / "dt" / "frameset" / "li" / "tbody" / "td" / "tfoot" / "th" / "thead" / "tr" / "script" /
                "ADDRESS" / "BLOCKQUOTE" / "CENTER" / "DIR" / "DIV" / "DL" / "FIELDSET" / "FORM" / "H1" / "H2" / "H3" /
                "H4" / "H5" / "H6" / "HR" / "ISINDEX" / "MENU" / "NOFRAMES" / "NOSCRIPT" / "OL" / "P" / "PRE" / "TABLE" /
                "UL" / "DD" / "DT" / "FRAMESET" / "LI" / "TBODY" / "TD" / "TFOOT" / "TH" / "THEAD" / "TR" / "SCRIPT"

StyleOpen <-     '<' Spnl ("style" / "STYLE") Spnl HtmlAttribute* '>'
StyleClose <-    '<' Spnl '/' ("style" / "STYLE") Spnl '>'
InStyleTags <-   StyleOpen (!StyleClose .)* StyleClose
StyleBlock <-    < InStyleTags >
                BlankLine*

Inlines  <-  StartList ( !Endline Inline
                        / c:Endline &Inline )+ Endline?

Inline  <- Str
        / Endline
        / UlOrStarLine
        / Space
        / Strong
        / Emph
        / Strike
        / Image
        / Link
        / NoteReference
        / InlineNote
        / Code
        / RawHtml
        / Entity
        / EscapedChar
        / Smart
        / Symbol

Space <- Spacechar+

Str <- StartList < NormalChar+ >
      ( StrChunk )*

StrChunk <- < (NormalChar / '_'+ &Alphanumeric)+ >
           AposChunk

AposChunk <- &{ extension(EXT_SMART) } '\'' &Alphanumeric

EscapedChar <-   '\\' !Newline < [-\\`|*_{}[\]()#+.!><] >

Entity <-    ( HexEntity / DecEntity / CharEntity )

Endline <-   LineBreak / TerminalEndline / NormalEndline

NormalEndline <-   Sp Newline !BlankLine !'>' !AtxStart
                  !(Line ('='+ / '-'+) Newline)

TerminalEndline <- Sp Newline Eof

LineBreak <- "  " NormalEndline

Symbol <-    < SpecialChar >

# This keeps the parser from getting bogged down on long strings of '*' or '_',
# or strings of '*' or '_' with space on each side:
UlOrStarLine <-  (UlLine / StarLine)
StarLine <-      < "****" '*'* > / < Spacechar '*'+ &Spacechar >
UlLine   <-      < "____" '_'* > / < Spacechar '_'+ &Spacechar >

Emph <-      EmphStar / EmphUl

Whitespace <- Spacechar / Newline

EmphStar <-  '*' !Whitespace
            StartList
            ( !'*' Inline
            / StrongStar
            )+
            '*'

EmphUl <-    '_' !Whitespace
            StartList
            ( !'_' Inline { a <- cons(b, a); }
            / StrongUl  { a <- cons(b, a); }
            )+
            '_'
            { $$ <- mk_list(EMPH, a); }

Strong <- StrongStar / StrongUl

StrongStar <-    "**" !Whitespace
                StartList
                ( !"**" Inline { a <- cons(b, a); })+
                "**"
                { $$ <- mk_list(STRONG, a); }

StrongUl   <-    "__" !Whitespace
                StartList
                ( !"__" Inline { a <- cons(b, a); })+
                "__"
                { $$ <- mk_list(STRONG, a); }

Strike <- &{ extension(EXT_STRIKE) }
         "~~" !Whitespace
         StartList
         ( !"~~" Inline { a <- cons(b, a); })+
         "~~"
         { $$ <- mk_list(STRIKE, a); }

Image <- '!' ( ExplicitLink / ReferenceLink )
        { if ($$->key == LINK) {
              $$->key <- IMAGE;
          } else {
              element *result;
              result <- $$;
              $$->children <- cons(mk_str("!"), result->children);
          } }

Link <-  ExplicitLink / ReferenceLink / AutoLink

ReferenceLink <- ReferenceLinkDouble / ReferenceLinkSingle

ReferenceLinkDouble <-  Label < Spnl > !"[]" Label
                       {   link match;
                           if (find_reference(&match, b->children)) {
                               $$ <- mk_link(a->children, match.url, match.title);
                               free(a);
                               free_element_list(b);
                           } else {
                               element *result;
                               result <- mk_element(LIST);
                               result->children <- cons(mk_str("["), cons(a, cons(mk_str("]"), cons(mk_str(yytext),
                                                   cons(mk_str("["), cons(b, mk_str("]")))))));
                               $$ <- result;
                           }
                       }

ReferenceLinkSingle <-  Label < (Spnl "[]")? >
                       {   link match;
                           if (find_reference(&match, a->children)) {
                               $$ <- mk_link(a->children, match.url, match.title);
                               free(a);
                           }
                           else {
                               element *result;
                               result <- mk_element(LIST);
                               result->children <- cons(mk_str("["), cons(a, cons(mk_str("]"), mk_str(yytext))));
                               $$ <- result;
                           }
                       }

ExplicitLink <-  l:Label '(' Sp s:Source Spnl t:Title Sp ')'
                { $$ <- mk_link(l->children, s->contents.str, t->contents.str);
                  free_element(s);
                  free_element(t);
                  free(l); }

Source  <- ( '<' < SourceContents > '>' / < SourceContents > )
          { $$ <- mk_str(yytext); }

SourceContents <- ( ( !'(' !')' !'>' Nonspacechar )+ / '(' SourceContents ')')*

Title <- ( TitleSingle / TitleDouble / < "" > )
        { $$ <- mk_str(yytext); }

TitleSingle <- '\'' < ( !( '\'' Sp ( ')' / Newline ) ) . )* > '\''

TitleDouble <- '"' < ( !( '"' Sp ( ')' / Newline ) ) . )* > '"'

AutoLink <- AutoLinkUrl / AutoLinkEmail

AutoLinkUrl <-   '<' < [A-Za-z]+ "://" ( !Newline !'>' . )+ > '>'
                {   $$ <- mk_link(mk_str(yytext), yytext, ""); }

AutoLinkEmail <- '<' ( "mailto:" )? < [-A-Za-z0-9+_./!%~$]+ '@' ( !Newline !'>' . )+ > '>'
                {   char *mailto <- malloc(strlen(yytext) + 8);
                    sprintf(mailto, "mailto:%s", yytext);
                    $$ <- mk_link(mk_str(yytext), mailto, "");
                    free(mailto);
                }

Reference <- NonindentSpace !"[]" l:Label ':' Spnl s:RefSrc t:RefTitle BlankLine+
            { $$ <- mk_link(l->children, s->contents.str, t->contents.str);
              free_element(s);
              free_element(t);
              free(l);
              $$->key <- REFERENCE; }

Label <- '[' ( !'^' &{ extension(EXT_NOTES) } / &. &{ !extension(EXT_NOTES) } )
        StartList
        ( !']' Inline { a <- cons($$, a); } )*
        ']'
        { $$ <- mk_list(LIST, a); }

RefSrc <- < Nonspacechar+ >
         { $$ <- mk_str(yytext);
           $$->key <- HTML; }

RefTitle <-  ( RefTitleSingle / RefTitleDouble / RefTitleParens / EmptyTitle )
            { $$ <- mk_str(yytext); }

EmptyTitle <- < "" >

RefTitleSingle <- Spnl '\'' < ( !( '\'' Sp Newline / Newline ) . )* > '\''

RefTitleDouble <- Spnl '"' < ( !('"' Sp Newline / Newline) . )* > '"'

RefTitleParens <- Spnl '(' < ( !(')' Sp Newline / Newline) . )* > ')'

References <- StartList
             ( Reference { a <- cons(b, a); } / SkipBlock )*
             { references <- reverse(a); }

Ticks1 <- "`" !'`'
Ticks2 <- "``" !'`'
Ticks3 <- "```" !'`'
Ticks4 <- "````" !'`'
Ticks5 <- "`````" !'`'

Code <- ( Ticks1 Sp < ( ( !'`' Nonspacechar )+ / !Ticks1 '`'+ / !( Sp Ticks1 ) ( Spacechar / Newline !BlankLine ) )+ > Sp Ticks1
       / Ticks2 Sp < ( ( !'`' Nonspacechar )+ / !Ticks2 '`'+ / !( Sp Ticks2 ) ( Spacechar / Newline !BlankLine ) )+ > Sp Ticks2
       / Ticks3 Sp < ( ( !'`' Nonspacechar )+ / !Ticks3 '`'+ / !( Sp Ticks3 ) ( Spacechar / Newline !BlankLine ) )+ > Sp Ticks3
       / Ticks4 Sp < ( ( !'`' Nonspacechar )+ / !Ticks4 '`'+ / !( Sp Ticks4 ) ( Spacechar / Newline !BlankLine ) )+ > Sp Ticks4
       / Ticks5 Sp < ( ( !'`' Nonspacechar )+ / !Ticks5 '`'+ / !( Sp Ticks5 ) ( Spacechar / Newline !BlankLine ) )+ > Sp Ticks5
       )
       { $$ <- mk_str(yytext); $$->key <- CODE; }

RawHtml <-   < (HtmlComment / HtmlBlockScript / HtmlTag) >
            {   if (extension(EXT_FILTER_HTML)) {
                    $$ <- mk_list(LIST, NULL);
                } else {
                    $$ <- mk_str(yytext);
                    $$->key <- HTML;
                }
            }

BlankLine <-     Sp Newline

Quoted <-        '"' (!'"' .)* '"' / '\'' (!'\'' .)* '\''
HtmlAttribute <- (AlphanumericAscii / '-')+ Spnl ('=' Spnl (Quoted / (!'>' Nonspacechar)+))? Spnl
HtmlComment <-   "<!--" (!"-->" .)* "-->"
HtmlTag <-       '<' Spnl '/'? AlphanumericAscii+ Spnl HtmlAttribute* '/'? Spnl '>'
Eof <-           !.
Spacechar <-     ' ' / '\t'
Nonspacechar <-  !Spacechar !Newline .
Newline <-       '\n' / '\r' '\n'?
Sp <-            Spacechar*
Spnl <-          Sp (Newline Sp)?
SpecialChar <-   '~' / '*' / '_' / '`' / '&' / '[' / ']' / '(' / ')' / '<' / '!' / '#' / '\\' / '\'' / '"' / ExtendedSpecialChar
NormalChar <-    !( SpecialChar / Spacechar / Newline ) .
Alphanumeric <- [0-9A-Za-z] / '\200' / '\201' / '\202' / '\203' / '\204' / '\205' / '\206' / '\207' / '\210' / '\211' / '\212' / '\213' / '\214' / '\215' / '\216' / '\217' / '\220' / '\221' / '\222' / '\223' / '\224' / '\225' / '\226' / '\227' / '\230' / '\231' / '\232' / '\233' / '\234' / '\235' / '\236' / '\237' / '\240' / '\241' / '\242' / '\243' / '\244' / '\245' / '\246' / '\247' / '\250' / '\251' / '\252' / '\253' / '\254' / '\255' / '\256' / '\257' / '\260' / '\261' / '\262' / '\263' / '\264' / '\265' / '\266' / '\267' / '\270' / '\271' / '\272' / '\273' / '\274' / '\275' / '\276' / '\277' / '\300' / '\301' / '\302' / '\303' / '\304' / '\305' / '\306' / '\307' / '\310' / '\311' / '\312' / '\313' / '\314' / '\315' / '\316' / '\317' / '\320' / '\321' / '\322' / '\323' / '\324' / '\325' / '\326' / '\327' / '\330' / '\331' / '\332' / '\333' / '\334' / '\335' / '\336' / '\337' / '\340' / '\341' / '\342' / '\343' / '\344' / '\345' / '\346' / '\347' / '\350' / '\351' / '\352' / '\353' / '\354' / '\355' / '\356' / '\357' / '\360' / '\361' / '\362' / '\363' / '\364' / '\365' / '\366' / '\367' / '\370' / '\371' / '\372' / '\373' / '\374' / '\375' / '\376' / '\377'
AlphanumericAscii <- [A-Za-z0-9]
Digit <- [0-9]
BOM <- "\357\273\277"

HexEntity <-     < '&' '#' [Xx] [0-9a-fA-F]+ ';' >
DecEntity <-     < '&' '#' [0-9]+ > ';' >
CharEntity <-    < '&' [A-Za-z0-9]+ ';' >

NonindentSpace <-    "   " / "  " / " " / ""
Indent <-            "\t" / "    "
IndentedLine <-      Indent Line
OptionallyIndentedLine <- Indent? Line

# StartList starts a list data structure that can be added to with cons:
StartList <- &.
            { $$ <- NULL; }

Line <-  RawLine
        { $$ <- mk_str(yytext); }
RawLine <- ( < (!'\r' !'\n' .)* Newline > / < .+ > Eof )

SkipBlock <- HtmlBlock
          / ( !'#' !SetextBottom1 !SetextBottom2 !BlankLine RawLine )+ BlankLine*
          / BlankLine+
          / RawLine

# Syntax extensions

ExtendedSpecialChar <- &{ extension(EXT_SMART) } ('.' / '-' / '\'' / '"')
                    / &{ extension(EXT_NOTES) } ( '^' )

Smart <- &{ extension(EXT_SMART) }
        ( Ellipsis / Dash / SingleQuoted / DoubleQuoted / Apostrophe )

Apostrophe <- '\''
             { $$ <- mk_element(APOSTROPHE); }

Ellipsis <- ("..." / ". . .")
           { $$ <- mk_element(ELLIPSIS); }

Dash <- EmDash / EnDash

EnDash <- '-' &Digit
         { $$ <- mk_element(ENDASH); }

EmDash <- ("---" / "--")
         { $$ <- mk_element(EMDASH); }

SingleQuoteStart <- '\'' !(Spacechar / Newline)

SingleQuoteEnd <- '\'' !Alphanumeric

SingleQuoted <- SingleQuoteStart
               StartList
               ( !SingleQuoteEnd Inline { a <- cons(b, a); } )+
               SingleQuoteEnd
               { $$ <- mk_list(SINGLEQUOTED, a); }

DoubleQuoteStart <- '"'

DoubleQuoteEnd <- '"'

DoubleQuoted <-  DoubleQuoteStart
                StartList
                ( !DoubleQuoteEnd Inline )+
                DoubleQuoteEnd

NoteReference <- &{ extension(EXT_NOTES) }
                ref:RawNoteReference

RawNoteReference <- "[^" < ( !Newline !']' . )+ > ']'

Note <-          &{ extension(EXT_NOTES) }
                NonindentSpace ref:RawNoteReference ':' Sp
                StartList
                ( RawNoteBlock  )
                ( &Indent RawNoteBlock  )*

InlineNote <-    &{ extension(EXT_NOTES) }
                "^["
                StartList
                ( !']' Inline  )+
                ']'

Notes <-         StartList
                ( Note  / SkipBlock )*

RawNoteBlock <-  StartList
                    ( !BlankLine OptionallyIndentedLine )+
                ( < BlankLine* >  )

