#From: https://github.com/swayf/grako/blob/f8ab1cc84b25ed132fb6feaa906cfc31ce140f1f/examples/antlr2grako/grammar/antlr.ebnf
#(*
#    ANTLR v3 grammar written in Grako EBNF syntax.
#
#    This grammar is inspired in, but different one by the one created
#    by Terence Parr using ANTLR syntax. It is licensed under the BSD
#    License to keep in the spirit of ANTLR.
#*)

grammar
    <-
    ('lexer'/'parser')? 'grammar' name ';'
    options?
    imports?
    tokens?
    scope*
    action*
    rule+
    !.

options
    <-
    'options'  '{' option+ '}'

option
    <-
    id '='  (id/string/char/int/'*') ';'

imports
    <-
    'import' name (',' name)* ';'

tokens
    <-
    'tokens' '{' token+ '}'

token
    <-
    token_name ('=' token_value )? ';'

token_value
    <-
    literal

scope
    <-
    'scope'
    (
      block ('scope' id (',' id)* ';' )?
    / id (',' id)* ';'
    / id block
    )

action
    <-
    '@'  ('lexer'/'parser'/id)
    ('::' id)?
    block

block
    <-
    <'{' (block/[^}])* '}'>

rule
    <-
    ('protected'/'public'/'private'/'fragment')?
    id '!'? arg?
    ('returns' arg)?
    ('trhows' id (',' id)* )?
    options?
    scope?
    action*
    ':' alternatives ';'
    exceptions?

arg
    <-
    '['
        (
            arg
        /
            [^\]]
        )*
    ']'

exceptions
    <-
    ('catch' arg block)*
    ('finally' block)?

alternatives
    <-
    alternative ('|' alternative)*

alternative
    <-
    element* ('->' rewrite)?

element
    <-
      named
    / &'{' predicate_or_action
    #/ closure
    #/ positive_closure
    #/ optional
    / atom repetiton?

repetiton <-
    <[?+*]>

named
    <-
    id ('+='/ '=')  atom

predicate_or_action
    <-
      gated_predicate
    / semantic_predicate
    / semantic_action

gated_predicate
    <-
    block '?=>'

semantic_predicate
    <-
    block '?'

semantic_action
    <-
    '{'
        (
            semantic_action
        /
            [^}]
        )*
    '}'

syntactic_predicate
    <-
    subexp '=>'

#optional
#    <-
#    atom '?'
#
#closure
#    <-
#    atom '*'
#
#positive_closure
#    <-
#    atom '+'

atom
    <-
    (
      eof
    / negative
    / syntactic_predicate
    / subexp
    / range
    / terminal
    / non_terminal
    )
    ('^'/'!')?

eof
    <-
    'EOF'

range
    <-
    char '..' char

subexp
    <-
    '('
        (options ':')?
        alternatives
    ')'

negative
    <-
    '~' atom

non_terminal
    <-
    (
      rule_ref
    / token_ref
    )
    arg?

terminal
    <-
      char
    / string
    / any

any
    <-
    '.'

rewrite
    <-
    rewrite_term*

rewrite_term
    <-
      '^(' rewrite_term+ ')'
    / [^|;^)]

rule_ref
    <-
    lower_name

token_ref
    <-
    upper_name

token_name
    <-
    upper_name

literal
    <-
    id / string / int

id
    <-
    name

name
    <-
    <[a-zA-Z][A-Za-z0-9_]*>

lower_name
    <-
    <[a-z][A-Za-z0-9_]*>

upper_name
    <-
    <[A-Z][A-Za-z0-9_]*>

char
    <-
    string

string
    <-
    STRING

STRING
    <-
      <'"' ([^"\n\\] / ESC)* '"'>
    / <"'" ([^'\n\\] / ESC )* "'">
    / <'<<' (!'>>' .)* '>>'>

int
    <-
    <[0-9]+>

ESC
    <-
    "\\"['"\\nrtbfv]
    / "\\u"[a-fA-F0-9]{4}

%whitespace <- ([ \t\r\n]+ / "//"[^\n]* / "/*" (!"*/" .)* "*/")*
