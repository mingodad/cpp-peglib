(* Grammar *)

left_comment ::= "(*";
right_comment ::= "*)";
op_appending ::= space <Appending>epsilon</Appending>"appending" space;
op_prepending ::= space <Prepending>epsilon</Prepending>"prepending" space;
op_prefixing ::= space <Prefixing>epsilon</Prefixing>"prefixing" space;
op_suffixing ::= space <Suffixing>epsilon</Suffixing>"suffixing" space;
op_outfixing ::= space <Outfixing>epsilon</Outfixing>"outfixing" space;
op_surrounding ::= space <Surrounding>epsilon</Surrounding>"surrounding" space;
op_do ::= space "do" space;
op_done ::= space "done" space;
op_position ::= space "position" space;
keyword ::= "position"|"prepending"|"appending"|"prefixing"|"suffixing"|"outfixing"|"surrounding"|"done"|"do"|"sigma"|"epsilon"|"EOF"|"BOF";
comment ::= left_comment ((comment | ((~ right_comment) sigma)))* right_comment;
core_space ::= comment | [ \t\n\r];
space ::= core_space*;
alpha ::= [a-zA-Z];
decimal ::= [0-9];
numeric_escape ::= [0-9][0-9][0-9] | 'x' [0-9a-fA-F][0-9a-fA-F];
bracketed_escape ::= '\\' ([nrtb\\\-\[\]] | numeric_escape);
char_escape ::= '\\' ([nrtb'\\] | numeric_escape);
string_escape ::= '\\' ([nrtb"\\] | numeric_escape);
any_ident ::= (alpha | '_') ((alpha | decimal | '_'))*;
sp ::= core_space+ | ~alpha | EOF;
core_ident ::= ~(keyword sp) any_ident;
ident ::= space name:core_ident space;

op_sigma ::= space "sigma" sp;
op_epsilon ::= space "epsilon" sp;
op_eof ::= space "EOF" sp;
op_bof ::= space "BOF" sp;
op_or ::= space '|' space;
op_and ::= space '&' space;
op_not ::= space '~' space;
op_star ::= space '*' space;
op_tightstar ::= space ".*" space;
op_plus ::= space '+' space;
op_tightplus ::= space ".+" space;
op_option ::= space '?' space;
op_sharp ::= space "#" space;
op_produces ::= space "::=" space;
op_prod_pref ::= space ":(" space;
op_prod_suf ::= space "):=" space;
op_colon ::= space ':' space;
op_semicolon ::= space ';' space;
op_l_bracket ::= space '[' (~ '^');
op_l_n_bracket ::= space '[' '^';
op_r_bracket ::= ']' space;
op_l_paren ::= space '(' space;
op_r_paren ::= space ')' space;
op_l_brace ::= space '{' space;
op_r_brace ::= space '}' space;
op_dot ::= space '.' space;

opening_tag ::= space ('<' open:any_ident '>') space;

closed_tag ::= space ('<' open:any_ident "/>") space;

closing_tag ::= space ("</" close:any_ident '>') space;

expr ::=
  <Or>sequencable op_or expr</Or>
| <S>suffixable_expr op_and <And>expr</And></S>
| sequencable;

sequencable ::=
  <S>suffixable_expr sequencable</S>
| <Tight>suffixable_expr op_dot sequencable</Tight>
| suffixable_expr;

suffixable_expr ::=
  <Option>simple_expr op_option</Option>
| <TightPlus>simple_expr op_tightplus</TightPlus>
| <TightStar>simple_expr op_tightstar</TightStar>
| <Plus>simple_expr op_plus</Plus>
| <Star>simple_expr op_star</Star>
| <Not>op_not suffixable_expr</Not>
| simple_expr;

string_expr ::= space ('"' value:(((~ '"') (string_escape | [^"])))* '"') space;

simple_expr ::=
  (op_l_paren expr op_r_paren)
| <Position>op_position</Position>
| <Build>opening_tag expr closing_tag</Build>
| <JustTag>closed_tag</JustTag>
| <Tokenize>op_l_brace expr op_r_brace</Tokenize>
| <Epsilon>op_epsilon</Epsilon>
| <EOF>op_eof</EOF>
| <BOF>op_bof</BOF>
| <Sigma>op_sigma</Sigma>
| <Ascribe>ident op_colon suffixable_expr</Ascribe>
| <Constant>op_sharp string_expr</Constant>
| <Insensitive>string_expr '^' 'i'</Insensitive>
| <String>string_expr</String>
| <Char>space ('\'' value:(char_escape | ((~ char_escape) sigma)) '\'') space</Char>
| <N>ident</N> | characters;

bracketed_char_spec ::=
  <Range>low:char_spec '-' high:char_spec</Range>
| <Char>value:char_spec</Char>;

char_spec ::= bracketed_escape | [^\[\\\-\]\n\t\r\b];

characters ::=
  <Chars>op_l_bracket bracketed_char_spec* op_r_bracket</Chars>
| <NotChars>op_l_n_bracket bracketed_char_spec* op_r_bracket</NotChars>;

modifier ::=
  op_prefixing
| op_prepending
| op_appending
| op_suffixing
| op_surrounding
| op_outfixing
;

production ::=
  <Production>ident op_produces expr op_semicolon</Production>
| <Modifying>modifier <Modifier>expr</Modifier> op_do <Grammar>production+</Grammar> op_done op_semicolon</Modifying>;

grammar ::= <Grammar>production+</Grammar>;

start ::= grammar EOF;