#//=========================================================================
#//
#//  Part of PEG parser generator Mouse.
#//
#//  Copyright (C) 2009, 2010, 2011, 2021
#//  by Roman R. Redziejowski (www.romanredz.se).
#//
#//  Licensed under the Apache License, Version 2.0 (the "License")
#//  you may not use this file except in compliance with the License.
#//  You may obtain a copy of the License at
#//
#//       http://www.apache.org/licenses/LICENSE-2.0
#//
#//  Unless required by applicable law or agreed to in writing, software
#//  distributed under the License is distributed on an "AS IS" BASIS,
#//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#//  See the License for the specific language governing permissions and
#//  limitations under the License.
#//
#//-------------------------------------------------------------------------
#//
#//  Change log
#//    Version 1.2
#//      License changed by the author to Apache v.2.
#//      Allowed uppercase HexDigit.
#//      Added check for invalid Unicode.
#//      Made action for Grammar non-boolean.
#//   Version 1.3
#//      Replaced Space? by Space.
#//      Changed [\r\n] to [\r]? [\n] in EOL.
#//   Version 1.3.1
#//      Skip changed from (!SEMI _)* SEMI to (!SEMI _)+ SEMI?.
#//      (Bug fix: Skip failed after last SEMI, causing extra message.)
#//   Version 1.4
#//      Added UNTIL expression in Suffixed.
#//      Added optional ^ in front of CharClass.
#//      Used the shorthand expressions in the definition of Grammar,
#//      Skip, DiagName, StringLit, CharClass, Char, Comment.
#//   Version 2.3
#//      Changed definitions of Prefixed and Suffixed,
#//      new names of their semantic procedures.
#//      Introduced names for all operators.
#//
#//=========================================================================

Grammar   <- Space (Rule/Skip)* EOT #{Grammar}

Rule      <- Name EQUAL RuleRhs DiagName? SEMI #{Rule} ~{Error}

Skip      <- SEMI             # Skip must not consume null or fail.
    #/ _++ (SEMI/EOT)  # It is never called at EOT, but possibly at SEMI.

RuleRhs   <- Sequence Actions (SLASH Sequence Actions)* #{} <right-hand side>

Choice    <- Sequence (SLASH Sequence)* #{}

Sequence  <- Prefixed+ #{}

Prefixed  <- (AND / NOT) Suffixed #{Prefix}
    / Suffixed #{Pass}

Suffixed  <- Primary (STARPLUS / PLUSPLUS / IS / ISNOT) Primary #{Infix}
    / Primary (QUERY / STAR / PLUS) #{Suffix}
    / Primary #{Pass}

Primary   <- Name      #{Resolve}
    / LPAREN Choice RPAREN #{Pass2}
    / ANY       #{Any}
    / StringLit #{Pass}
    / Range     #{Pass}
    / CharClass #{Pass}

Actions   <- OnSucc OnFail #{}

OnSucc    <- (LWING AND? Name? RWING)? #{}

OnFail    <- (TILDA LWING Name? RWING)? #{}

Name      <- <Letter (Letter / Digit)*> Space #{}

DiagName  <- <"<" (!">" Char)+ ">"> Space #{}

StringLit <- <["] (!"\"" Char)+ ["]> Space #{}

CharClass <- <("[" / "^[") (!"]" Char)+ "]"> Space #{}

Range     <- <"[" Char "-" Char "]"> Space #{}

Char      <- Escape    #{Pass}
    / [^\r\n\\] #{Char}

Escape    <- "\\u" HexDigit HexDigit HexDigit HexDigit #{Unicode}
    / "\\t" #{Tab}
    / "\\n" #{Newline}
    / "\\r" #{CarRet}
    / !"\\u""\\". #{Escape}

Letter   <- [a-z] / [A-Z]
Digit    <- [0-9]
HexDigit <- [0-9] / [a-f] / [A-F]

AND      <- [&]     Space  #<&>
NOT      <- [!]     Space  #<!>
QUERY    <- [?]     Space  #<?>
STAR     <- [*]![+] Space  #<*>
PLUS     <- [+]![+] Space  #<+>
STARPLUS <- "*+"    Space #<*+>
PLUSPLUS <- "++"    Space #<++>
IS       <- [:]![!] Space  #<:>
ISNOT    <- ":!"    Space #<:!>
EQUAL    <- [=]     Space  #<=>
LPAREN   <- [(]     Space  #<(>
RPAREN   <- [)]     Space  #<)>
LWING    <- [{]     Space  #<{>
RWING    <- [}]     Space  #<}>
SEMI     <- [;]     Space  #<;>
SLASH    <- [/]     Space  #</>
TILDA    <- [~]     Space  #<~>
ANY      <- [_]     Space  #<_>

~Space   <- ([ \r\n\t] / Comment)* #{}
Comment <- "//"(!EOL .)* EOL?

EOL     <- [\r]? [\n] / !.  #<end of line>
EOT     <- !.               #<end of text>
