#From: https://github.com/nushell/grammar/blob/e39fe2704973063349d71ab2cbc1714d68838ea6/nushell.pest

# Program

program <-  code_block  nl*  EOI
code_block <-  (ws*  toplevel  sp*  ((nl / ";")+  ws*  toplevel  sp*)*)?  ws*
toplevel <-  (def_command / def_env_command / let_command / let_env_command / mut_command / assignment / pipeline)

# Primitives

hex_int <-  <"0x"  ASCII_HEX_DIGIT+>
oct_int <-  <"0o"  ASCII_OCT_DIGIT+>
bin_int <-  <"0b"  ASCII_BIN_DIGIT+>
dec_int <-  <"-"?  ("0" / ASCII_NONZERO_DIGIT  ASCII_DIGIT*)>
int <-  hex_int / oct_int / bin_int / dec_int

float <-
    <"-"?
     ("0" / ASCII_NONZERO_DIGIT  ASCII_DIGIT*)
     "."
     ASCII_DIGIT*
     ("e"i  ("+" / "-")?  ASCII_DIGIT+)?>


string <-  double_quote_string / single_quote_string / backtick_string / interpolated_string
double_quote_string <-  <"\""  double_quote_string_inner  "\"">
double_quote_string_inner <-  <double_quote_string_char*>
double_quote_string_char <-
    !("\"" / "\\")  ANY
    / "\\"  ("\"" / "\\" / "/" / "a" / "b" / "e" / "f" / "n" / "r" / "t" / "(" / ")" / "{" / "}" / "[" / "]" / "$" / "^" / "#" / "|" / "~")
    / "\\"  ("u"  ASCII_HEX_DIGIT{4})


interpolated_string <-  double_quote_interpolated_string / single_quote_interpolated_string
double_quote_interpolated_string <-  <"$\""  double_quote_string_inner  "\"">
single_quote_interpolated_string <-  <"$'"  single_quote_string_inner  "'">

single_quote_string <-  <"'"  single_quote_string_inner  "'">
single_quote_string_inner <-  single_quote_string_char*
single_quote_string_char <-
    !("'")  ANY


backtick_string <-  <"`"  backtick_string_inner  "`">
backtick_string_inner <-  backtick_string_char*
backtick_string_char <-
    !("`")  ANY


filesize <-  dec_int  ("b"i / "kb"i / "kib"i / "mb"i / "mib"i / "gb"i / "gib"i / "tb"i / "tib"i / "pb"i / "pib"i / "eb"i / "eib"i / "zb"i / "zib"i)
duration <-  dec_int  ("ns"i / "us"i / "ms"i / "sec"i / "min"i / "hr"i / "day"i / "wk"i / "month"i / "yr"i / "dec"i)

unit <-  filesize / duration

binary_data <-  binary_data_hex / binary_data_oct / binary_data_bin
binary_data_hex <-  <"0x["  (ASCII_HEX_DIGIT / sp)+  "]">
binary_data_oct <-  <"0o["  (ASCII_OCT_DIGIT / sp)+  "]">
binary_data_bin <-  <"0b["  (ASCII_BIN_DIGIT / sp)+  "]">


# Compound values

array <-
    "["  "]" /
    "["  ws*  bare_value  ((ws / ",")+  bare_value)*  ws*  "]"


table <-
    "[" ws*  array  ws*  ";"  ws*  (array / ws)+  "]"

record <-
    "{"  ws*  "}" /
    "{"  ws*  pair  (ws*  ","  ws*  pair)*  ws*  "}"

pair <-  label  ws*  ":"  ws*  bare_value
label <-  string / ident

ident_char <- !(" " / "\t" / "|" / "$" / "{" / "}" / "(" / ")" / "[" / "]" / "\r" / "\n" / "." / "," / ":")  ANY
ident <-  <ident_char+>

range_value <-  int / float / variable / paren_expr
range <-  <(range_value  ".."  range_value) / (range_value  ".." ) / (".."  range_value)>

# Date & Time
# Borrowed from here and tweaked https://github.com/pest-parser/pest/blob/master/grammars/src/grammars/toml.pest

#ISO8601 Format
#d"1994-11-05T08:15:30.123456789Z"
#d"1994-11-05T08:15:30.123456789+01:00"
#d"1994-11-05T08:15:30.123456789-01:00"
#d"1994-11-05T08:15:30"
#d"1994-11-05T08:15:30Z"
#d"1994-11-05T01:01:01+03:00"
#d"1994-11-05"

#TODO: Support other date formats? Support AM/PM? Match what nushell supports?

date_time       <-  full_date  "T"  full_time
local_date_time <-  full_date  "T"  partial_time

quotes          <-  ("\"" / "'" / "`")
date_sigil      <-  "d"   quotes
partial_time    <-  <time_hour  ":"  time_minute  ":"  time_second  time_secfrac?>
full_date       <-  <date_sigil  date_fullyear  "-"  date_month  "-"  date_mday  quotes?>
full_time       <-  <partial_time  time_offset?  quotes>

date_fullyear <-  ASCII_DIGIT{4}
date_month    <-  ASCII_DIGIT{2}
date_mday     <-  ASCII_DIGIT{2}

time_hour    <-  ASCII_DIGIT{2}
time_minute  <-  ASCII_DIGIT{2}
time_second  <-  ASCII_DIGIT{2}
time_secfrac <-  "."  ASCII_DIGIT+
time_offset  <-  "Z" / ("+" / "-")  time_hour  ":"  time_minute

date_or_datetime <-  date_time / local_date_time / full_date  full_time?

# Bare word forms

bare_char <- !(" " / "\t" / "|" / "$" / "{" / "}" / "(" / ")" / "\r" / "\n")  ANY
bare_follow_char <- !(" " / "\t" / "|" / "$" / "(" / ")" / "\r" / "\n")  ANY
bare_string <-  <bare_char  bare_follow_char*>
bare_word <-  <(ASCII_ALPHANUMERIC / "-" / "." / "_")+>
bare_value <-  value / bare_word


# Variables

variable_char <- !(" " / "\t" / "|" / "$" / "{" / "}" / "(" / ")" / "[" / "]" / "\r" / "\n" / "." / ":" / "+" / "-" / "/" / "*")  ANY
variable_name <-  <variable_char+>
variable <-  <"$"  variable_name>


# Math expression

comp_op_word <-  "starts-with" / "ends-with" / "in" / "not-in"
comp_op <-  "!~" / "=~" / "<=" / ">=" / "<" / ">" / "!=" / "=="

shift_op_word <-  "bit-shl" / "bit-shr"

plus_op <-  "+" / "-"

mul_op_word <-  "mod"
mul_op <-  (!"**"  "*") / "//" / "/"

or_expr <-  and_expr  (((sp+  "or"  sp+) / (sp*  "||"  sp*))  and_expr)*
and_expr <-  bitor_expr  (((sp+  "and"  sp+) / (sp*  "&&"  sp*))  bitor_expr)*
bitor_expr <-  bitxor_expr  ((sp+  "bit-or"  sp+)  bitxor_expr)*
bitxor_expr <-  bitand_expr  ((sp+  "bit-xor"  sp+)  bitand_expr)*
bitand_expr <-  comp_expr  ((sp+  "bit-and"  sp+)  comp_expr)*
comp_expr <-  shift_expr  (((sp*  comp_op  sp*) / (sp+  comp_op_word  sp+))  shift_expr)*
shift_expr <-  plus_expr  (((sp+  shift_op_word  sp+))  plus_expr)*
plus_expr <-  mul_expr  (sp*  plus_op  sp*  mul_expr)*
mul_expr <-  pow_expr  (((sp*  mul_op  sp*) / (sp+  mul_op_word  sp+))   pow_expr)*
pow_expr <-  value  ((sp*  "**"  sp*)  value)*

# Row conditions

row_value <-  value / ident
row_or_expr <-  row_and_expr  (((sp+  "or"  sp+) / (sp*  "||"  sp*))  row_and_expr)*
row_and_expr <-  row_bitor_expr  (((sp+  "and"  sp+) / (sp*  "&&"  sp*))  row_bitor_expr)*
row_bitor_expr <-  row_bitxor_expr  ((sp+  "bit-or"  sp+)  row_bitxor_expr)*
row_bitxor_expr <-  row_bitand_expr  ((sp+  "bit-xor"  sp+)  row_bitand_expr)*
row_bitand_expr <-  row_comp_expr  ((sp+  "bit-and"  sp+)  row_comp_expr)*
row_comp_expr <-  row_shift_expr  (((sp*  comp_op  sp*) / (sp+  comp_op_word  sp+))  row_shift_expr)*
row_shift_expr <-  row_plus_expr  (sp+  shift_op_word  sp+  row_plus_expr)*
row_plus_expr <-  row_mul_expr  (sp*  plus_op  sp*  row_mul_expr)*
row_mul_expr <-  row_pow_expr  (((sp*  mul_op  sp*) / (sp+  mul_op_word  sp+))   row_pow_expr)*
row_pow_expr <-  row_value  (sp*  "**"  sp*  row_value)*

row_condition <-  row_or_expr


# Expression values

expr <-  or_expr

assignment_operator <-  "+=" / "-=" / "*=" / "/=" / "="
assignment <-  variable  ws*  assignment_operator  ws*  expr

paren_expr <-  "("  ws*  pipeline  ws*  ")"

pathed_value <-  (record / table / array / variable / closure / block / paren_expr / traditional_call)  (("."  ident) / ("["  ws*  expr  ws*  "]"))*

value <-  binary_data / range / unit / float / int / string / pathed_value / date_or_datetime / "true" / "false" / "null"

# Code blocks

block <-  "{"  code_block  "}"

closure_args <-  "|"  sp*  param*  sp*  "|"
closure <-  "{"  ws*  closure_args  code_block  "}"

param <-  ident  (sp*  ":"  sp*  ident)?  sp*  ("="  sp*  value)?  sp*  ","?  sp?
params <-  ("("  ws*  param*  ws*  ")") / ("["  ws*  param*  ws*  "]")

# Builtins

where_command <-  "where"  row_condition
def_command <-  "def"  sp+  ident  sp*  params  sp*  block
def_env_command <-  "def-env"  sp+  ident  sp*  params  sp*  block
if_command <-  "if"  sp+  expr  sp*  block  (sp+  "else"  sp+  if_command)*  (sp+  "else"  sp*  block)?
for_command <-  "for"  sp+  ident  sp+  "in"  sp+  ( range / array / ident / variable )  sp+  block
while_command <-  "while"  sp+  expr  sp+  block
let_command <-  "let"  sp+  ident  sp*  "="  sp*  pipeline
let_env_command <-  "let-env"  sp+  ident  sp*  "="  sp*  pipeline
mut_command <-  "mut"  sp+  ident  sp*  "="  sp*  pipeline

# Commands

long_flag <-  "--"  <(ASCII_ALPHANUMERIC / "-")+>  ("="  bare_string)?
short_flag <-  "-"  <ASCII_ALPHANUMERIC+>
flag <-  short_flag / long_flag

user_command <-  ident  (sp+  (flag / value / bare_string ))*

break_command <-  "break"
continue_command <-  "continue"
return_command <-  "return"  expr?
commands <-  if_command / for_command / while_command / where_command / break_command / continue_command / return_command / expr / user_command
command <-  !(("def" / "def-env")  sp+)  commands

unnamed_arg <-  value
named_arg <-  label  sp*  ":"  sp*  value
traditional_call_arg <-  named_arg / unnamed_arg
arg_list <-  traditional_call_arg  (sp*  ","  sp*  traditional_call_arg)*
traditional_call <-  (ident  "("  ws*  arg_list?  ws*  ")")

# Pipeline

pipeline <-  command  (ws*  (!"||"  "|")  ws*  command)*

# Trivia

COMMENT <-  "#"  (!"\n"  ANY)*
~nl <-  "\r" / "\n"
~ws <-  nl / sp / COMMENT
~sp <-  " " / "\t"

ANY <- .
EOI <- !.
ASCII_ALPHANUMERIC <- [A-Za-z0-9]
ASCII_DIGIT <- [0-9]
ASCII_NONZERO_DIGIT <- [1-9]
ASCII_BIN_DIGIT <- [01]
ASCII_OCT_DIGIT <- [0-7]
ASCII_HEX_DIGIT <- [0-9A-Fa-f]
