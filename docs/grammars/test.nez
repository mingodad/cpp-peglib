/* Nez format */

public File
   = { S* (@Statement )* #List }


/* Code Layout  */

_
   = (S / COMMENT)*

S
   = [\t\n\r ]

COMMENT
   = '/*' (!('*/') .)* '*/'
   / '//' (!EOL .)* EOL

EOL
   = '\n'
   / '\r' ('\n')?
   / EOT

EOT
   = !(.)

/* Operators */

"<" = '<' _
">" = '>' _
"," = ',' _
";" = ';' _
"=" = '=' _
"(" = '(' _
")" = ')' _
"[" = '[' _
"]" = ']' _
"{" = '{' !'@' _
"}" = '}' _
"/" = '/' _
"|" = '|' _

/* Keywords */

"public"   = 'public'   !W _
"inline"   = 'inline'   !W _
"import"   = 'import'   !W _
"from"     = 'from'     !W _
"grammar"  = 'grammar'  !W _
"example"  = 'example'  !W _
"template" = 'template' !W _
"format"   = 'format'   !W _
"true"     = 'true'     !W _
"false"    = 'false'    !W _

"if"       = 'if'       !W _
"on"       = 'on'       !W _
"block"    = 'block'    !W _
"def"      = 'def'      !W _
"match"    = 'match'    !W _
"is"       = 'is'       !W _
"isa"      = 'isa'      !W _
"exists"   = 'exists'   !W _
"local"    = 'local'    !W _
"symbol"   = 'symbol'   !W _

/* reserved */

"type"     = 'type'    !W _
"define"   = 'define'  !W _

KEYWORD
   = "public"
   / "inline"
   / "import"
   / "from"
   / "grammar"
   / "example"
   / "template"
   / "format"
   / "true"
   / "false"
   / "define"
  // / "type"

NAME
   = !KEYWORD LETTER W*

LETTER
   = [A-Z_a-z$]

W
   = [0-9A-Z_a-z$]

Identifier
   = { NAME #Name } _


/* Statement */

public Statement
   = Document
   / ExampleStatement
   / ImportStatement
   / FormatStatement
   / TemplateStatement
   / Production

ImportStatement
   = { "import" @ImportName "from" @(Character / String) #Import }

ImportName
   = { ( '*' / NAME ('.' ( '*' / NAME ))? ) #Name } _

Document
   = { COMMENT (S* COMMENT)* #Comment } _

/* Production */

example Production '''
public p
	= ''
	/ 'p'
	/ [Pp]
	/ [P-p]
	/ P   /* nonterminal */
	/ p p
	/ ( p / p)
	/ &p
	/ !p
	/ { p }
	/ {@ p }
	/ @p
	/ #t
	/ `p`
	/ <if P>
	/ <on P p>
	/ <block p>
	/ <def P p>
	/ <is p>
	/ <isa p>
	/ <exists p>
'''

public Production
   = { $(Modifiers)? $name(Identifier / String) _SKIP_ "=" $(OldExample)* $body(Expression) #Production }

Modifiers
	= { $(Modifier)* #Sequence }

Modifier
	= { "public" `public` }
	/ { "inline" `inline` }

_SKIP_
   = _ANNOTATION_*

_ANNOTATION_
   = '[' _DOC_ ']' _

_DOC_
   = (!(']' / '[') .)* ('[' _DOC_ ']' _DOC_)?

/* Expression */

public Expression
   = Sequence ({@ ("/" @Sequence)+ #Choice })?

Sequence
   = Prefix ({@ (/* NOTRULE */ @Prefix)+ #Sequence })?

NOTRULE
   = !(';' / RuleHead )

RuleHead
   = { (@[2]Modifiers)? @[0](Identifier / String) _ _SKIP_ '=' }

Prefix
   = { ( '&' #And / '!' #Not / '$' (@Label)? #Link / '@[' _ @[1]Integer _ ']' #Link / '@' #Link / '~' #Match ) @[0]Suffix }
   / Suffix

Suffix
   = Primary ({@ ( '*' (@[1]Integer)? #Repetition / '+' #Repetition1 / '?' #Option ) })? _

Integer
   = { INT #Integer }

Primary
   = { "true" #Empty }
   / { "false" #Failure }
   / Character
   / Charset
   / { '.' #Any } _
   / { '0x' HEX HEX #Byte } _
   / { 'U+' HEX HEX HEX HEX #Byte } _
   / "(" Expression ")"
   / Constructor
   / Replace
   / Tagging
   / String !"="
   / Extension
   / NonTerminal !("=" / '[example:' / '[bad-example:')

NonTerminal
   = { NAME ('.' NAME)? #NonTerminal } _

Character
   = '\'' { ('\\\'' / '\\\\' / !['\n\r] .)* #Character } '\'' _

String
   = '"' { ('\\"' / '\\\\' / !["\n\r] .)* #String } '"' _

Charset
   = '[' { (@({ CHAR #Class } ({@ '-' @({ CHAR #Class }) #List })?))* #Class } ']' _

CHAR
   = '\\u' HEX HEX HEX HEX
   / '\\x' HEX HEX
   / '\\n'
   / '\\t'
   / '\\\\'
   / '\\r'
   / '\\v'
   / '\\f'
   / '\\-'
   / '\\]'
   / !(']') .

HEX
   = [0-9A-Fa-f]

Label
  = { NAME ('.' NAME)? #Label }

Constructor
   = { ('{@' S #LeftNew / '{$' $(Label)? S #LeftNew / '{' #New ) _ (@Expression)? '}' } _

Tagging
	= '#' { LETTER W* #Tagging } _

Replace
   = '`' { ('\\`' / '\\\\' / ![`\n\r] .)* #Replace } '`' _

Extension
   = "<" { addExtension } S* ">"

addExtension
	= "if"        @FlagName #If
	/ "on"        @FlagName @Expression #On
	/ "block"     @Expression #Block
	/ "symbol"    @Expression #Symbol
	/ "def"       @Expression #Symbol
	/ "match"     @Expression #Match
	/ "is"        @TableName #Is
	/ "isa"       @TableName #Isa
	/ "exists"    @TableName #Exists
	/ "local"     @TableName @Expression #Local
	/ @Identifier @Expression ("," @Expression)* #Expand
	/ (!('>') .)+ #Undefined

FlagName
   = { ('!')? LETTER W* #Name } _

TableName
   = { LETTER W* #Name } _

/* Other Statements */

TemplateStatement
	= { "template" @Identifier "<" @TemplateParameter ">" "=" @Expression #Template } _

TemplateParameter
	= { @Identifier ("," @Identifier)* }

OldExample
   = { '[' ('bad-')? 'example:' (!']' .)* ']' #OldExample} _

ExampleStatement
   = { "example" ( '!' #Rebut / #Example ) @NonTerminal ('&' @NonTerminal)* (@{'~' W+ #Hash} _ )? addInputText } _

addInputText
   = '\'\'\'' EOL @({ (!('\n' '\'\'\'') .)* }) '\n' '\'\'\''
   / '```' EOL @({ (!('\n' '```') .)* }) '\n' '```'
   / '"""' EOL @({ (!('\n' '"""') .)* }) '\n' '"""'
   / @({ (!EOL .)* }) EOL

FormatStatement
   = { "format" '#' @Identifier "[" @FormatSize "]" '`' @Formatter '`' #Format } _

FormatSize
   = { ( '*' / INT ) #Integer }

Formatter
   = { #List (!('`') @('${' Identifier '}'
   / '$[' _ Index _ ({@ '`' @Formatter '`' _ @Index _ #Format })? ']'
   / { ( '$$' `$` / '\\`' `\``
   / (!('$$' / '${' / '$[' / '\\`' / '`') .)+ ) }))* }

Index
   = { ('-')? INT #Integer }

INT
   = DIGIT DIGIT*

DIGIT
   = [0-9]
