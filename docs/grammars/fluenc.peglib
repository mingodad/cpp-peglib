#From: https://github.com/fluenc-lang/fluenc/blob/9d4d663ca9b7279faf4648d048637793d5bf0d51/grammar/fluenc.peg

Program             <- Instruction*
Instruction         <- Function / Structure / Global / Namespace

# Instructions
Function            <- RegularFunction / ImportedFunction / ExportedFunction
Structure           <- 'struct' Id TypeList FieldList
Global              <- 'global' Id ':' Expression
Namespace           <- 'namespace' Id '{' Instruction* '}'

# Constructs
Block               <- '{' (Local / Call / Conditional)* Return '}'
Field               <- DecoratedField / StandardField
Return              <- 'return' Expression ('->' Continuation)?
Continuation        <- Id '(' List(Expression)? ')'
Argument            <- StandardArgument / TupleArgument
TypeName            <- FunctionType / RegularType
Expression          <- Unary / Binary / Instantiation / Literal / Tuple / Group / Expansion / Call / Member / Conditional / Array / Local
Comment             <- '//' [^\r\n]*
Assignment          <- Id ':' Expression
With                <- 'with' '{' List(Assignment) ','? '}'

# Lists
TypeList            <- (':' List(TypeName))?
FieldList           <- ('{' List(Field) ','? '}')?
IdList              <- Id ('.' Id)*

# Types
RegularType         <- Id
FunctionType        <- 'function' '(' List(RegularType)? ')'

# Fields
DecoratedField      <- TypeName Id (':' Expression)?
StandardField       <- Id (':' Expression)?

# Arguments
StandardArgument    <- TypeName Id
TupleArgument       <- '(' Argument (',' Argument)* ')'

# Functions
RegularFunction     <- 'function' Id '(' List(Argument)? ')' Block
ImportedFunction    <- 'import' TypeName Id '(' List(Argument)? ')'
ExportedFunction    <- 'export' TypeName Id '(' List(Argument)? ')' Block

# Expressions
Literal             <- ByteLiteral / Float32Literal / Uint32Literal / Int64Literal / Int32Literal / BooleanLiteral / StringLiteral / CharLiteral / NothingLiteral
Binary              <- (Group BinaryOperator Expression) / (Literal BinaryOperator Expression) / (Member BinaryOperator Expression) / (Call BinaryOperator Expression) / (Array BinaryOperator Expression)
Unary               <- (UnaryOperator Group) / (UnaryOperator Literal) / (UnaryOperator Member) / (UnaryOperator Call)
Member              <- IdList With?
Call                <- 'tail'? Id '(' List(Expression)? ')'
Instantiation       <- TypeName '{' (List(Assignment) ','?)? '}'
Conditional         <- 'if' '(' Expression ')' Block
Array               <- '[' (List(Expression) ','?)? ']'
Group               <- '(' Expression ')'
Expansion           <- '...' Expression
Local               <- 'let' Id '=' Expression
Tuple               <- '(' Expression (',' Expression)+ ')'

# Literals
Int32Literal        <- Integer
Int64Literal        <- Integer 'i64'
Float32Literal      <- < Integer '.' Integer >
BooleanLiteral      <- < 'true' | 'false' >
StringLiteral       <- String
Uint32Literal       <- Integer 'u32'
CharLiteral         <- < '\'' < [^\']+ > '\'' >
ByteLiteral         <- Integer 'u8'
NothingLiteral      <- 'nothing'

# Primitives
BinaryOperator      <- '<=' | '>=' | '==' | '!=' | '&&' | '||' | '-' | '+' | '/' | '*' | '%' | '>>' | '<<' | '<' | '>' | '|' | '&' | '^' | '|'
UnaryOperator       <- '!' | '@'
Integer             <- < ('0x'[0-9A-F]+) / ('-'?[0-9]+) >
String              <- < '"' < [^"]* > '"' >
Keyword             <- 'return' | 'if' | 'let'
Id                  <- < (!Keyword '::'? Char (Char / Digit / '::')*) / '...' >
Char                <- [a-zA-Z_]
Digit               <- [0-9]
List(T)             <- T (',' T)*


%whitespace         <- (Comment / [ \t\r\n;])*