#From: https://sourceforge.net/p/ironmeta/code/ci/default/tree/Source/Generator/Parser.ironmeta

#//////////////////////////////////////////////////////////////////////
#//
#// Copyright  2013 Verophyle Informatics
#// All rights reserved.
#//
#// Redistribution and use in source and binary forms, with or without
#// modification, are permitted provided that the following conditions
#// are met:
#//
#//     * Redistributions of source code must retain the above
#//       copyright notice, this list of conditions and the following
#//       disclaimer.
#//     * Redistributions in binary form must reproduce the above
#//       copyright notice, this list of conditions and the following
#//       disclaimer in the documentation and/or other materials
#//       provided with the distribution.
#//     * Neither the name of the IronMeta Project nor the names of its
#//       contributors may be used to endorse or promote products
#//       derived from this software without specific prior written
#//       permission.
#//
#// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#// "AS IS" AND  ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING, BUT NOT
#// LIMITED TO, THE  IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS
#// FOR  A  PARTICULAR  PURPOSE  ARE DISCLAIMED. IN  NO EVENT SHALL THE
#// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#// BUT NOT  LIMITED TO, PROCUREMENT  OF SUBSTITUTE  GOODS  OR SERVICES
#// LOSS OF USE, DATA, OR  PROFITS; OR  BUSINESS  INTERRUPTION) HOWEVER
#// CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT
#// LIABILITY, OR  TORT (INCLUDING NEGLIGENCE  OR OTHERWISE) ARISING IN
#// ANY WAY OUT  OF THE  USE OF THIS SOFTWARE, EVEN  IF ADVISED  OF THE
#// POSSIBILITY OF SUCH DAMAGE.
#//
#//////////////////////////////////////////////////////////////////////


IronMetaFile <- '\ufeff'? SP Preamble? Grammar EOF

Preamble <- Using+

Using <- USING QualifiedId SP SEMI

Grammar <- IRONMETA Identifier
    LESS GenericId COMMA GenericId GREATER
    COLON GenericId
    BRA Rule* KET

Rule <- OVERRIDE? Identifier Disjunction? EQUALS Disjunction SEMI

Disjunction <- ActionExp ( OR ActionExp )*

ActionExp <- SequenceExp ACTION &BRA CSharpCode
	/ SequenceExp

FailExp <- BANG (CSharpCode)?

SequenceExp <- ConditionExp+

ConditionExp <- FailExp
	/ BoundTerm QUES &OPEN CSharpCode
	/ BoundTerm

BoundTerm <- PrefixedTerm COLON Identifier
	/ COLON Identifier
	/ PrefixedTerm

PrefixedTerm <- LookTerm / NotTerm / PostfixedTerm
LookTerm <- AND_PRE PostfixedTerm
NotTerm <- NOT_PRE PostfixedTerm

#PostfixedTerm <- MinMaxTerm / StarTerm / PlusTerm / QuesTerm / Term
PostfixedTerm <-  Term Repetiton?

MinMaxTerm <- BRA Number (COMMA Number)? KET

#StarTerm <- Term STAR
#PlusTerm <- Term PLUS
#QuesTerm <- Term QUES !OPEN SP

Repetiton <- QUES !OPEN SP / PLUS / STAR / MinMaxTerm

Term <- InputClass / ParenTerm / RuleCall / CallOrVar / Literal / AnyTerm

ParenTerm <- OPEN Disjunction CLOSE
AnyTerm <- PERIOD

RuleCall <- QualifiedId OPEN ParameterList? CLOSE
ParameterList <- Parameter (COMMA Parameter)*
Parameter <- CallOrVar / Literal

CallOrVar <-  QualifiedId
Literal <- ((NEW GenericId? &'{') / &('\x22' / '\x27' / '{')) CSharpCode

InputClass <- <'[' SP (ClassRange / &'\x27' Literal)+ ']'> SP
ClassRange <- &'\x27' Literal SP '-' SP &'\x27' Literal SP

CSharpCode <- CSharpCodeItem SP

CSharpCodeItem <- <
    '{' (!'}' (EOL / Comment / CSharpCodeItem / .))* '}'
	/ '(' (!')' (EOL / Comment / CSharpCodeItem / .))* ')'
	/ '\x27' (EOL / "\x5c\x27" / UnicodeEsc / "\x5c\x5c" / !'\x27' .)* '\x27'   # '
	/ '\x22' (EOL / "\x5c\x22" / UnicodeEsc / "\x5c\x5c" / !'\x22' .)* '\x22'   # "
	>

UnicodeEsc <- "\\u" [0-9A-Fa-f]{4}

Identifier <- <Ident> SP
Ident <- !KEYWORD <IdentBegin IdentBody*>
IdentBegin <- [A-Za-z_]
IdentBody <- [A-Za-z0-9_]

QualifiedId <- <Ident (DOT Ident)*> SP
GenericId <- QualifiedId SP (LESS (GenericId (COMMA GenericId)*) GREATER)?

Number <- <[0-9]+> SP

KEYWORD <- <("using" | "ironmeta" | "override" | "virtual" | "new" | "lr") !IdentBegin >

USING <- "using" SP
IRONMETA <- "ironmeta" SP
EQUALS <- ('=' / "::=") SP
OVERRIDE <- ("override" / "virtual" / "new") SP
NEW <- "new" SP
#LR <- "lr" SP
SEMI <- (';' / ',') SP
BANG <- '!' SP
OR <- '|' SP
ACTION <- "->" SP
COLON <- ':' SP
COMMA <- ',' SP
DOT <- '.'
PERIOD <- DOT SP
BRA <- '{' SP
KET <- '}' SP
OPEN <- '(' SP
CLOSE <- ')' SP
LESS <- '<' SP
GREATER <- '>' SP
QUES <- '?' # note no spacing
AND_PRE <- '&'
NOT_PRE <- '~'
STAR <- '*' SP
PLUS <- '+' SP

~SP <- (EOL / WS / Comment)*
WS <- [ \t]

Comment <- "//" (!EOL .)* EOL?
	/ "/*" (!"*/" .)* "*/"

EOL <- ('\r' '\n'? / '\n' '\r'?)
EOF <- !.
