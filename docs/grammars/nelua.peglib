# Adapted from https://github.com/edubart/nelua-lang/blob/master/lualib/nelua/syntaxdefs.lua

chunk  <-
	 SHEBANG  ?  SKIP  Block  (  !  .  )

Block  <-
	 (  localOrGlobal  /  FuncDef  /  Return  /  In  /  Do  /  Defer  /  If  /  Switch  /  for  /  While  /  Repeat  /  Break  /  Continue  /  Fallthrough  /  Goto  /  Label  /  Preprocess  /  Assign  /  call  /  ( ';' SKIP )  )  *

#  Statements

Label  <-
	 ( '::' SKIP )  name  ( '::' SKIP )

Return  <-
	 ( 'return' WB )  (  expr  (  ( ',' SKIP )  expr  )  *  )  ?

In  <-
	 ( 'in' WB )  expr

Break  <-
	 ( 'break' WB )

Continue  <-
	 ( 'continue' WB )

Fallthrough  <-
	 ( 'fallthrough' WB )

Goto  <-
	 ( 'goto' WB )  name

Do  <-
	 ( 'do' WB )  Block  ( 'end' WB )

Defer  <-
	 ( 'defer' WB )  Block  ( 'end' WB )

While  <-
	 ( 'while' WB )  expr  ( 'do' WB )  Block  ( 'end' WB )

Repeat  <-
	 ( 'repeat' WB )  Block  ( 'until' WB )  expr

If  <-
	 ( 'if' WB )  ifs  (  ( 'else' WB )  Block  )  ?  ( 'end' WB )

ifs  <-
	 expr  ( 'then' WB )  Block  (  ( 'elseif' WB )  expr  ( 'then' WB )  Block  )  *

Switch  <-
	 ( 'switch' WB )  expr  ( 'do' WB )  ?  cases  (  ( 'else' WB )  Block  )  ?  ( 'end' WB )

cases  <-
	 (  ( 'case' WB )  exprs  ( 'then' WB )  Block  )  +

for  <-
	 ( 'for' WB )  (  ForNum  /  ForIn  )

ForNum  <-
	 iddecl  ( '=' SKIP )  expr  ( ',' SKIP )  forcmp  ?  expr  (  ( ',' SKIP )  expr  )  ?  ( 'do' WB )  Block  ( 'end' WB )

ForIn  <-
	 iddecls  ( 'in' WB )  exprs  ( 'do' WB )  Block  ( 'end' WB )

 localOrGlobal  <-
	 ( ( 'local' / 'global' )  WB )  (  lg_func  /  lg_var  )

 lg_func  <-
	 ( 'function' SKIP )  namedecl  funcbody

 lg_var  <-
	 suffixeddecls  (  ( '=' SKIP )  exprs  )  ?


FuncDef  <-
	 ( 'function' WB )  funcname  funcbody #false

funcbody  <-
	 ( '(' SKIP )  funcargs  ( ')' SKIP )  (  ( ':' SKIP )  funcrets  )  ?  annots  ?  Block  ( 'end' WB )

Assign  <-
	 vars  ( '=' SKIP )  exprs

Preprocess  <-
	 PREPROCESS SKIP

#  Simple expressions  Simple expressions

Number  <-
	 NUMBER  name  ?  SKIP

String  <-
	 STRING  name  ?  SKIP

Boolean  <-
	 ( 'true' WB )
	/  ( 'false' WB )

Nilptr  <-
	 ( 'nilptr' WB )

Nil  <-
	 ( 'nil' WB )

Varargs  <-
	 ( '...' SKIP )

Id  <-
	 name

IdDecl  <-
	 name  (  ( ':' SKIP )  typeexpr  )  ?  annots  ?

typeddecl  <-
	 name  ( ':' SKIP )  typeexpr  annots  ?

suffixeddecl  <-
	 (  idsuffixed  /  name  )  (  ( ':' SKIP )  typeexpr  )  ?  annots  ?

suffixeddeclexpr  <-
	 suffixeddecl
	/  PreprocessExpr

namedecl  <-
	 name

Function  <-
	 ( 'function' WB )  funcbody

InitList  <-
	 ( '{' SKIP )  (  field  (  fieldsep  field  )  *  fieldsep  ?  )  ?  ( '}' SKIP )

field  <-
	 Pair
	/  expr

Paren  <-
	 ( '(' SKIP )  expr  ( ')' SKIP )

DoExpr  <-
	 ( '(' SKIP )  ( 'do' WB )  Block  ( 'end' WB )  ( ')' SKIP )

Type  <-
	 ( '@' SKIP )  typeexpr

Pair  <-
	 ( '[' SKIP )  expr  ( ']' SKIP )  ( '=' SKIP )  expr
	/  name  ( '=' SKIP )  expr
	/  ( '=' SKIP )  id

Annotation  <-
	 name  annotargs  ?

#  Preprocessor replaceable nodes

PreprocessExpr  <-
	 ( '#[' SKIP )  expr  ( ']#' SKIP )

PreprocessName  <-
	 ( '#|' SKIP )  expr  ( '|#' SKIP )

ppcallprim  <-
	 NAME  ( '!' SKIP )  &callsuffix

#  Suffixes  Suffixes

Call  <-
	 callargs

CallMethod  <-
	 ( ':' SKIP )  name  callargs

DotIndex  <-
	 ( '.' SKIP )  name

ColonIndex  <-
	 ( ':' SKIP )  name

KeyIndex  <-
	 ( '[' SKIP )  expr  ( ']' SKIP )

indexsuffix  <-
	 DotIndex
	/  KeyIndex

callsuffix  <-
	 Call
	/  CallMethod

var  <-
	 (  exprprim  (  indexsuffix  /  callsuffix  +  indexsuffix  )  +  )
	/  id
	/  deref

call  <-
	 (  exprprim  (  callsuffix  /  indexsuffix  +  callsuffix  )  +  )

exprsuffixed  <-
	 (  exprprim  (  indexsuffix  /  callsuffix  )  *  )

idsuffixed  <-
	 (  id  DotIndex  +  )

funcname  <-
	 (  id  DotIndex  *  ColonIndex  ?  )

#  Lists

callargs  <-
	 ( '(' SKIP )  (  expr  (  ( ',' SKIP )  expr  )  *  )  ?  ( ')' SKIP )
	/  InitList
	/  String

annotargs  <-
	 ( '(' SKIP )  (  expr  (  ( ',' SKIP )  expr  )  *  )  ?  ( ')' SKIP )
	/  InitList
	/  String
	/  PreprocessExpr

iddecls  <-
	 iddecl  (  ( ',' SKIP )  iddecl  )  *

funcargs  <-
	 (  iddecl  (  ( ',' SKIP )  iddecl  )  *  (  ( ',' SKIP )  VarargsType  )  ?  /  VarargsType  )  ?

suffixeddecls  <-
	 suffixeddeclexpr  (  ( ',' SKIP )  suffixeddeclexpr  )  *

exprs  <-
	 expr  (  ( ',' SKIP )  expr  )  *

annots  <-
	 ( '<' SKIP )  Annotation  (  ( ',' SKIP )  Annotation  )  *  ( '>' SKIP )

funcrets  <-
	 ( '(' SKIP )  typeexpr  (  ( ',' SKIP )  typeexpr  )  *  ( ')' SKIP )
	/  typeexpr

vars  <-
	 var  (  ( ',' SKIP )  var  )  *

#  Expression operators

opor  <-
	 ( 'or' WB )  exprand

opand  <-
	 ( 'and' WB )  exprcmp

opcmp  <-
	 cmp  exprbor

opbor  <-
	 ( '|' SKIP )  exprbxor

opbxor  <-
	 ( '~' SKIP )  exprband

opband  <-
	 ( '&' SKIP )  exprbshift

opbshift  <-
	 (  ( '<<' SKIP )  /  ( '>>>' SKIP )  /  ( '>>' SKIP )  )  exprconcat

opconcat  <-
	 ( '..' SKIP )  exprconcat

oparit  <-
	 (  ( '+' SKIP )  /  ( '-' SKIP )  )  exprfact

opfact  <-
	 (  ( '*' SKIP )  /  ( '///' SKIP )  /  ( '//' SKIP )  /  ( '/' SKIP )  /  ( '%%%' SKIP )  /  ( '%' SKIP )  )  exprunary

oppow  <-
	 ( '^' SKIP )  exprunary

opunary  <-
	 (  ( 'not' WB )  /  ( '-' SKIP )  /  ( '#' SKIP )  /  ( '~' SKIP )  /  ( '&' SKIP )  /  ( '$' SKIP )  )  exprunary

deref  <-
	 ( '$' SKIP ) exprunary

#  Expressions  Expressions

expr  <-
	 expror

expror  <-
	 (  exprand  opor  *  )

exprand  <-
	 (  exprcmp  opand  *  )

exprcmp  <-
	 (  exprbor  opcmp  *  )

exprbor  <-
	 (  exprbxor  opbor  *  )

exprbxor  <-
	 (  exprband  opbxor  *  )

exprband  <-
	 (  exprbshift  opband  *  )

exprbshift  <-
	 (  exprconcat  opbshift  *  )

exprconcat  <-
	 (  exprarit  opconcat  *  )

exprarit  <-
	 (  exprfact  oparit  *  )

exprfact  <-
	 (  exprunary  opfact  *  )

exprunary  <-
	 opunary
	/  exprpow

exprpow  <-
	 (  exprsimple  oppow  *  )

exprsimple  <-
	 Number
	/  String
	/  Type
	/  InitList
	/  Boolean
	/  Function
	/  Nilptr
	/  Nil
	/  Varargs
	/  exprsuffixed

exprprim  <-
	 ppcallprim
	/  id
	/  DoExpr
	/ Paren

#  Types  Types

RecordType  <-
	 'record'  WB  ( '{' SKIP )  (  RecordField  (  fieldsep  RecordField  )  *  fieldsep  ?  )  ?  ( '}' SKIP )

UnionType  <-
	 'union'  WB  ( '{' SKIP )  (  UnionField  (  fieldsep  UnionField  )  *  fieldsep  ?  )  ?  ( '}' SKIP )

EnumType  <-
	 'enum'  WB  (  ( '(' SKIP )  typeexpr  ( ')' SKIP )  )  ?  ( '{' SKIP )  enumfields  ( '}' SKIP )

FuncType  <-
	 'function'  WB  ( '(' SKIP )  functypeargs  ( ')' SKIP )  (  ( ':' SKIP )  funcrets  )  ?

ArrayType  <-
	 'array'  WB  ( '(' SKIP )  typeexpr  (  ( ',' SKIP )  expr  )  ?  ( ')' SKIP )

PointerType  <-
	 'pointer'  WB  (  ( '(' SKIP )  typeexpr  ( ')' SKIP )  )  ?

VariantType  <-
	 'variant'  WB  ( '(' SKIP )  typearg  (  ( ',' SKIP )  typearg  )  *  ( ')' SKIP )

VarargsType  <-
	 ( '...' SKIP )  (  ( ':' SKIP )  name  )  ?

RecordField  <-
	 name  ( ':' SKIP )  typeexpr

UnionField  <-
	 name  ( ':' SKIP )  typeexpr
	/  typeexpr #false

EnumField  <-
	 name  (  ( '=' SKIP )  expr  )  ?

#  Type lists

enumfields  <-
	 EnumField  (  fieldsep  EnumField  )  *  fieldsep  ?

functypeargs  <-
	 (  functypearg  (  ( ',' SKIP )  functypearg  )  *  (  ( ',' SKIP )  VarargsType  )  ?  /  VarargsType  )  ?

typeargs  <-
	 typearg  (  ( ',' SKIP )  typearg  )  *

functypearg  <-
	 typeddecl
	/  typeexpr

typearg  <-
	 typeexpr
	/  ( '(' SKIP )  expr  ( ')' SKIP )
	/ expr

#  Type expression operators  Type expression operators

typeopptr  <-
	 ( '*' SKIP )

typeopopt  <-
	 ( '?' SKIP )

typeoparr  <-
	 ( '[' SKIP )  expr  ?  ( ']' SKIP )

#typeopvar  <-
#	 typevaris

typeopgen  <-
	 ( '(' SKIP )  typeargs  ( ')' SKIP )
	/  &  ( '{' SKIP )  InitList

typevaris  <-
	 ( '|' SKIP )  typeexprunary  (  ( '|' SKIP )  typeexprunary  )  *

typeopunary  <-
	 typeopptr
	/ typeopopt
	/ typeoparr

#  Type expressions  Type expressions

typeexpr  <-
	 (  typeexprunary  typevaris  ?  )

typeexprunary  <-
	 (  typeopunary  *  typexprsimple  )

typexprsimple  <-
	 RecordType
	/  UnionType
	/  EnumType
	/  FuncType
	/  ArrayType
	/  PointerType
	/  VariantType
	/  (  typeexprprim  typeopgen  ?  )

typeexprprim  <-
	 idsuffixed
	/ id

#  Common rules  Common rules

name  <-
	 NAME  SKIP
	/  PreprocessName

id  <-
	 Id
	/  PreprocessExpr

iddecl  <-
	 IdDecl
	/  PreprocessExpr

cmp  <-
	 ( '==' SKIP )
	/  forcmp

forcmp  <-
	 ( '~=' SKIP )
	/  ( '<=' SKIP )
	/  ( '<' SKIP )
	/  ( '>=' SKIP )
	/  ( '>' SKIP )

fieldsep  <-
	 ( ',' SKIP )
	/ (';' SKIP )

#  String

STRING  <-
	 STRING_SHRT
	/  STRING_LONG

STRING_LONG  <-
	  '[' $lsep<'='*> '[' LINEBREAK? <( ! (']' $lsep ']') . )*> ']' $lsep ']'

STRING_SHRT  <-
	 $quote<["']> <( ESCAPE_SEQ / ( ! ( $quote / LINEBREAK ) . ) )*> $quote


ESCAPE_SEQ  <-
	 '\\'  ESCAPE

ESCAPE  <-
	 [\\'"]
	/ ( 'n' / 't' / 'r' / 'a' / 'b' / 'v' / 'f' )
	/ < 'x' HEX_DIGIT HEX_DIGIT >
	/ < 'u' '{' HEX_DIGIT HEX_DIGIT+ '}' >
	/ ( 'z' SPACE* )
	/ <DEC_DIGIT DEC_DIGIT !DEC_DIGIT / [012] DEC_DIGIT DEC_DIGIT>
	/ LINEBREAK

#  Number

NUMBER  <-
	 <HEX_NUMBER
	/  BIN_NUMBER
	/  DEC_NUMBER>

HEX_NUMBER  <-
	 '0' [xX] HEX_PREFIX  ( [pP] EXP_DIGITS  )  ?

BIN_NUMBER  <-
	 '0' [bB] BIN_PREFIX  ( [pP] EXP_DIGITS  )  ?

DEC_NUMBER  <-
	 DEC_PREFIX  ( [eE] EXP_DIGITS  )  ?

HEX_PREFIX  <-
	 HEX_DIGIT  +  (  '.'  HEX_DIGIT  *  )  ?
	/  '.'  HEX_DIGIT  +

BIN_PREFIX  <-
	 BIN_DIGITS  (  '.'  BIN_DIGITS  ?  )  ?
	/  '.'  BIN_DIGITS

DEC_PREFIX  <-
	 DEC_DIGIT  +  (  '.'  DEC_DIGIT  *  )  ?
	/  '.'  DEC_DIGIT  +

EXP_DIGITS  <-
	[+-] ?  DEC_DIGIT  +

#  Comments

COMMENT  <-
	 '--'  (  STRING_LONG  /  COMMENT_SHRT  )

COMMENT_SHRT  <-
	 (  !  LINEBREAK  .  )  *

#  Preprocess

PREPROCESS  <-
	 '##'  (  STRING_LONG  /  PREPROCESS_SHRT  )

PREPROCESS_SHRT  <-
	 (  !  LINEBREAK  .  )  *  LINEBREAK  ?

#  Long (used by string, comment and preprocess)


NAME  <-
	 !  KEYWORD  <NAME_PREFIX  NAME_SUFFIX  ?> SKIP

NAME_PREFIX  <-
	[_a-zA-Z] #%utf8seq

NAME_SUFFIX  <-
	[_a-zA-Z0-9] + #%utf8seq

#  Miscellaneous

SHEBANG  <-
	 '#!'  (  !  LINEBREAK  .  )  *  LINEBREAK  ?

~SKIP   <-
	 (  SPACE  +  /  COMMENT  )  *

#WORDSKIP
~WB  <-
	 !  NAME_SUFFIX  SKIP

~LINEBREAK  <-
	 '\n'  '\r'
	/  '\r'  '\n'
	/  '\n'
	/  '\r'

SPACE  <-
	 (' ' / '\t' / '\r' / '\n')

HEX_DIGIT  <-
	[0-9a-fA-F]

BIN_DIGITS  <-
	[01] +  !  DEC_DIGIT

DEC_DIGIT  <-
	[0-9]

#EXTRA_TOKENS  <-
#	 ( '[[' SKIP )  ( '[=' SKIP )  ( '--' SKIP )
#  Force defining these tokens. ( ' Force defining these tokens.' SKIP )

 KEYWORD <-
    <( 'and'
	| 'break'
	| 'case'
	| 'continue'
	| 'defer'
	| 'do'
	| 'elseif'
	| 'else'
	| 'end'
	| 'fallthrough'
	| 'false'
	| 'for'
	| 'function'
	| 'global'
	| 'goto'
	| 'if'
	| 'in'
	| 'local'
	| 'nilptr'
	| 'nil'
	| 'not'
	| 'or'
	| 'repeat'
	| 'return'
	| 'switch'
	| 'then'
	| 'true'
	| 'until'
	| 'while') WB>